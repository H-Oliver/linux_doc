还原一个数据库:mysql -h localhost -u root -p123456 www


备份一个数据库:mysqldump -h localhost -u root -p123456 www > d:\www2008-2-26.sql


其中WWW为数据库名


//以下是在程序中进行测试


//$command = “mysqldump –opt -h $dbhost -u $dbuser -p $dbpass $dbname | gzip > $backupFile”;
 $command=”mysqldump -h localhost -u root -p123456 guestbook > guestbook2-29.sql”;
system($command);
 echo “success”;


 ************************************************


备份MySQL数据库的命令


mysqldump -hhostname -uusername -ppassword databasename > backupfile.sql
备份MySQL数据库为带删除表的格式
 备份MySQL数据库为带删除表的格式，能够让该备份覆盖已有数据库而不需要手动删除原有数据库。


mysqldump -–add-drop-table -uusername -ppassword databasename > backupfile.sql
直接将MySQL数据库压缩备份


mysqldump -hhostname -uusername -ppassword databasename | gzip > backupfile.sql.gz
备份MySQL数据库某个(些)表


mysqldump -hhostname -uusername -ppassword databasename specific_table1 specific_table2 > backupfile.sql
同时备份多个MySQL数据库


mysqldump -hhostname -uusername -ppassword –databases databasename1 databasename2 databasename3 > multibackupfile.sql
仅仅备份数据库结构


mysqldump –no-data –databases databasename1 databasename2 databasename3 > structurebackupfile.sql
备份服务器上所有数据库


mysqldump –all-databases > allbackupfile.sql
还原MySQL数据库的命令


mysql -hhostname -uusername -ppassword databasename < backupfile.sql
还原压缩的MySQL数据库

gunzip < backupfile.sql.gz | mysql -uusername -ppassword databasename
将数据库转移到新服务器

mysqldump -uusername -ppassword databasename | mysql –host=*.*.*.* -C databasename

几个常用用例：
1.导出整个数据库
mysqldump -u 用户名 -p 数据库名 > 导出的文件名
mysqldump -u root -p dataname >dataname.sql
这个时候会提示要你输入root用户名的密码,输入密码后dataname数据库就成功备份在mysql/bin/目录中.

2.导出一个表
mysqldump -u 用户名 -p 数据库名 表名> 导出的文件名
mysqldump -u root -p dataname users> dataname_users.sql

 3.导出一个数据库结构
mysqldump -u wcnc -p -d –add-drop-table smgp_apps_wcnc >d:\wcnc_db.sql
-d 没有数据 –add-drop-table 在每个create语句之前增加一个drop table

 4.导入数据库
 常用source 命令
 进入mysql数据库控制台，
 如mysql -u root -p

 mysql>use 数据库

 然后使用source命令，后面参数为脚本文件（如这里用到的.sql）
mysql>source d:\wcnc_db.sql

 mysqldump支持下列选项：
–add-locks
在每个表导出之前增加LOCK TABLES并且之后UNLOCK TABLE。(为了使得更快地插入到MySQL)。

–add-drop-table
在每个create语句之前增加一个drop table。

–allow-keywords
允许创建是关键词的列名字。这由表名前缀于每个列名做到。

-c, –complete-insert
使用完整的insert语句(用列名字)。

-C, –compress
如果客户和服务器均支持压缩，压缩两者间所有的信息。

–delayed
用INSERT DELAYED命令插入行。

-e, –extended-insert
使用全新多行INSERT语法。（给出更紧缩并且更快的插入语句）

-#, –debug[=option_string]
跟踪程序的使用(为了调试)。

–help
显示一条帮助消息并且退出。

–fields-terminated-by=…

 –fields-enclosed-by=…


 –fields-optionally-enclosed-by=…

 –fields-escaped-by=…


 –fields-terminated-by=…

这些选择与-T选择一起使用，并且有相应的LOAD DATA INFILE子句相同的含义。
LOAD DATA INFILE语法。

-F, –flush-logs
在开始导出前，洗掉在MySQL服务器中的日志文件。

-f, –force,
即使我们在一个表导出期间得到一个SQL错误，继续。

-h, –host=..
从命名的主机上的MySQL服务器导出数据。缺省主机是localhost。

-l, –lock-tables.
为开始导出锁定所有表。

-t, –no-create-info
不写入表创建信息(CREATE TABLE语句）

-d, –no-data
不写入表的任何行信息。如果你只想得到一个表的结构的导出，这是很有用的！

–opt
同–quick –add-drop-table –add-locks –extended-insert –lock-tables。
 应该给你为读入一个MySQL服务器的尽可能最快的导出。

-pyour_pass, –password[=your_pass]
与服务器连接时使用的口令。如果你不指定“=your_pass”部分，mysqldump需要来自终端的口令。

-P port_num, –port=port_num
与一台主机连接时使用的TCP/IP端口号。（这用于连接到localhost以外的主机，因为它使用 Unix套接字。）

-q, –quick
不缓冲查询，直接导出至stdout；使用mysql_use_result()做它。

-S /path/to/socket, –socket=/path/to/socket
与localhost连接时（它是缺省主机)使用的套接字文件。

-T, –tab=path-to-some-directory
对于每个给定的表，创建一个table_name.sql文件，它包含SQL CREATE 命令，和一个table_name.txt文件，它包含数据。注意：这只有在mysqldump运行在mysqld守护进程运行的同一台机器上的时候才工作。.txt文件的格式根据–fields-xxx和 –lines–xxx选项来定。

-u user_name, –user=user_name
与服务器连接时，MySQL使用的用户名。缺省值是你的Unix登录名。

-O var=option, –set-variable var=option
设置一个变量的值。可能的变量被列在下面。

-v, –verbose
冗长模式。打印出程序所做的更多的信息。

-V, –version
打印版本信息并且退出。

-w, –where=’where-condition’
只导出被选择了的记录；注意引号是强制的！
“–where=user=’jimf’” “-wuserid>1″ “-wuserid<1″

最常见的mysqldump使用可能制作整个数据库的一个备份：
mysqldump –opt database > backup-file.sql


但是它对用来自于一个数据库的信息充实另外一个MySQL数据库也是有用的：
mysqldump –opt database | mysql –host=remote-host -C database
由于mysqldump导出的是完整的SQL语句，所以用mysql客户程序很容易就能把数据导入了：
shell> mysqladmin create target_db_name
 shell> mysql target_db_name < backup-file.sql
就是shell> mysql 库名 < 文件名


//mysql权限管理


mysql中可以给你一个用户授予如select,insert,update,delete等其中的一个或者多个权限,主要使用grant命令,用法格式为： 
grant 权限 on 数据库对象 to 用户 
一、grant 普通数据用户，查询、插入、更新、删除 数据库中所有表数据的权利。 
grant select on testdb.* to common_user@’%’ 
grant insert on testdb.* to common_user@’%’ 
grant update on testdb.* to common_user@’%’ 
grant delete on testdb.* to common_user@’%’ 
或者，用一条 mysql 命令来替代： 
grant select, insert, update, delete on testdb.* to common_user@’%’


二、grant 数据库开发人员，创建表、索引、视图、存储过程、函数。。。等权限。 
grant 创建、修改、删除 mysql 数据表结构权限。 
grant create on testdb.* to developer@’192.168.0.%’; 
grant alter on testdb.* to developer@’192.168.0.%’; 
grant drop on testdb.* to developer@’192.168.0.%’; 
grant 操作 mysql 外键权限。 
grant references on testdb.* to developer@’192.168.0.%’; 
grant 操作 mysql 临时表权限。 
grant create temporary tables on testdb.* to developer@’192.168.0.%’; 
grant 操作 mysql 索引权限。 
grant index on testdb.* to developer@’192.168.0.%’; 
grant 操作 mysql 视图、查看视图源代码 权限。 
grant create view on testdb.* to developer@’192.168.0.%’; 
grant show view on testdb.* to developer@’192.168.0.%’; 
grant 操作 mysql 存储过程、函数 权限。 
grant create routine on testdb.* to developer@’192.168.0.%’; - now, can show procedure status 
 grant alter routine on testdb.* to developer@’192.168.0.%’; - now, you can drop a procedure 
 grant execute on testdb.* to developer@’192.168.0.%’;


三、grant 普通 dba 管理某个 mysql 数据库的权限。 
grant all privileges on testdb to dba@’localhost’ 
其中，关键字 “privileges” 可以省略。


 四、grant 高级 dba 管理 mysql 中所有数据库的权限。 
grant all on *.* to dba@’localhost’


五、mysql grant 权限，分别可以作用在多个层次上。 
1. grant 作用在整个 mysql 服务器上： 
grant select on *.* to dba@localhost; - dba 可以查询 mysql 中所有数据库中的表。 
grant all on *.* to dba@localhost; - dba 可以管理 mysql 中的所有数据库 
2. grant 作用在单个数据库上： 
grant select on testdb.* to dba@localhost; - dba 可以查询 testdb 中的表。 
3. grant 作用在单个数据表上： 
grant select, insert, update, delete on testdb.orders to dba@localhost; 
 4. grant 作用在表中的列上： 
grant select(id, se, rank) on testdb.apache_log to dba@localhost; 
 5. grant 作用在存储过程、函数上： 
grant execute on procedure testdb.pr_add to ’dba’@’localhost’ 
grant execute on function testdb.fn_add to ’dba’@’localhost’


六、查看 mysql 用户权限 
查看当前用户（自己）权限： 
show grants; 
查看其他 mysql 用户权限： 
show grants for dba@localhost;


七、撤销已经赋予给 mysql 用户权限的权限。 
revoke 跟 grant 的语法差不多，只需要把关键字 “to” 换成 “from” 即可： 
grant all on *.* to dba@localhost; 
 revoke all on *.* from dba@localhost;


八、mysql grant、revoke 用户权限注意事项 
1. grant, revoke 用户权限后，该用户只有重新连接 mysql 数据库，权限才能生效。 
2. 如果想让授权的用户，也可以将这些权限 grant 给其他用户，需要选项 “grant option“ 
grant select on testdb.* to dba@localhost with grant option; 
这个特性一般用不到。实际中，数据库权限最好由 dba 来统一管理。


 注意：修改完权限以后 一定要刷新服务，或者重启服务，刷新服务用：flush privileges。


 查看用户权限
show  grants for 你的用户

 比如：
show grants for root@'localhost'